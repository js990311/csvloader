package com.rejs.csvloader.repository;

import com.rejs.csvloader.TestcontainersConfiguration;
import com.rejs.csvloader.file.FileSystemAccessObject;
import com.rejs.csvloader.file.LocalFileSystemAccessObject;
import com.rejs.csvloader.repository.query.InsertQueryBuilder;
import com.rejs.csvloader.validator.CsvColumnValidateService;
import com.rejs.csvloader.validator.CsvColumnValidationResult;
import com.rejs.csvloader.yaml.ImportPropertiesLoader;
import com.rejs.csvloader.yaml.properties.config.DatabaseProperties;
import com.rejs.csvloader.yaml.properties.config.ImportProperties;
import com.rejs.csvloader.yaml.properties.model.ColumnProperty;
import com.rejs.csvloader.yaml.properties.model.WorkProperty;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.context.annotation.Import;
import org.springframework.core.io.Resource;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.test.context.ActiveProfiles;
import org.testcontainers.containers.PostgreSQLContainer;

import java.util.List;

@ActiveProfiles("test")
@Import(TestcontainersConfiguration.class)
@SpringBootTest
class JdbcBatchInsertRepositoryTest {
    @Autowired
    private InsertQueryBuilder insertQueryBuilder;

    @Autowired
    private ImportPropertiesLoader loader;

    @Autowired
    private FileSystemAccessObject fao = new LocalFileSystemAccessObject();

    @Autowired
    private CsvColumnValidateService validateService;

    @Autowired
    private JdbcBatchInsertRepository jdbcBatchInsertRepository;

    @Autowired
    private PostgreSQLContainer<?> postgresContainer;

    @Autowired
    private JdbcTemplateProvider jdbcTemplateProvider;

    @Test
    void batchInsert() {
        ImportProperties properties = loader.loadProperties("test.yml");
        Resource data = fao.load("test.csv");
        JdbcTemplate jdbcTemplate = createJdbcTemplate(properties.getDatabase());

        jdbcTemplate.execute("""
            create table test_users
            (
                id    bigint generated by default as identity
                    primary key,
                age   integer,
                email varchar(255),
                name  varchar(255),
                test_korean varchar(255)
            );
        """);

        for(WorkProperty work : properties.getWorks()){
            String query = insertQueryBuilder.buildInsertQuery(work);

            List<ColumnProperty> columns = work.getColumns();
            CsvColumnValidationResult result = validateService.validate(columns, data);

            List<Object[]> datas = result.getValidDatas();
            jdbcBatchInsertRepository.batchInsert(jdbcTemplate, query, datas, columns);
        }
    }

    private JdbcTemplate createJdbcTemplate(DatabaseProperties properties){
        DatabaseProperties databaseProperties = new DatabaseProperties();
        databaseProperties.setDriver("org.postgresql.Driver");
        databaseProperties.setHost(postgresContainer.getJdbcUrl());
        databaseProperties.setUsername(properties.getUsername());
        databaseProperties.setPassword(properties.getPassword());
        return jdbcTemplateProvider.createJdbcTemplate(databaseProperties);
    }
}